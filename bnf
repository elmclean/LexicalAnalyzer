<program_structure> -> <import_declarations>? <type_declarations>

<import_declarations> -> <import_declaration> | <import_declarations>
<import_declaration> -> include <package_name>;

<type_declarations> -> <type_declaration> | <type_declarations><type_declaration>
<type_declaration> -> <class_declaration>
<class_declaration -> <class_modifiers>? class <identifier><class_body>
<class_modifiers> -> <class_modifier> | <class_modifiers><class_modifier>
<class_modifier> -> open | abstract | final
<class_body> -> : <class_main_declaration> end <identifier>;

<class_main_declaration> -> <class_main_declaration>
<class_main_declaration> -> <field_modifier> static vacant main (string[] args) <class_main_body>
<class_main_body> -> : <main_body> end main;


<constructor_modifiers> -> <constructor_modifier> | <constructor_modifiers><constructor_modifer>         
<constructor_modifier> -> define open static task | define guarded task | define restricted task

<constructor_declarator> -> <simple_type_name> (<formal_parameter_list>?)
<formal_parameter_list> -> <formal_parameter> | <formal_parameter_list>, <formal_parameter>
<formal_parameter> -> <type><variable_declarator_id>
<constructor_body> -> : <block_statements>? end <simple_type_name>;
<field_declaraction> -> <field_modifiers>? <type><variable_declarators>;
<field_modifiers> -> <field_modifier> | <field_modifiers><field_modifier>
<field_modifier> -> open | guarded | restricted | static | final

<variable_declarators> -> <variable_declarator> | <variable_declarators>, <variable_declarator>
<variable_declarator> -> <variable_declarator_id> | <variable_declarator_id> = <variable_initializer>
<variable_declarator_id> -> <identifier> | <variable_declarator_id> [ ]
<variable_initializer> -> <expression> | <array_initializer>
<method_declaration> -> <method_header><method_body>
<method_header> -> <method modifiers>? <result_type><method_declarator>
<result_type> -> <type> | vacant
<method_modifiers> -> <method_modifier> | <method_modifiers><method_modifier>
<method_modifier> -> open | guarded | restricted | static | final
<method_declarator> -> <identifier> (<formal_parameter_list>?)
<method_body> -> <block> | ;
<array_initializer> -> { <variable_initializers>?, ? }
<variable_initializers> -> <variable_initializer> | <variable_initializers>, <variable_initializer>
<variable_initializer> -> <expression> | <array_initializer>

TYPES
<type> -> <primitive_type> | <reference_type>
<primitive_type> -> <numeric_type> | boolean
<numberic_type> -> <integral_type> | <floating_point_type>
<integral_type> -> integer | character
<floating_point_type> -> float | double
<reference_type> -> <class_type> | <array_type>
<class_type> -> <type_name>
<array_type> -> <type> [ ]

BLOCKS AND COMMANDS
<block> -> : <block_statements>? end;
<block_statements> -> <block_statement> | <block_statements><block_statement>
<block_statement> -> <local_variable_declaration_statement> | <statement>
<local_variable_declaration_statement> -> <local_variable_declaration> ;
<local_varibale_declaration> -> <type><variable_declarators>
<statement> -> <statement_without_trailing_substatement> | <labeled_statement> |
                         <if_then_statement> | <if_then_else_statement> | <while_statement> |
                         <for_statement>
<statement_no_short_if> -> <statement_without_trailing_substatement> |
        <labeled_statement_no_short_if> | 
        <if_then_else_statement_no_short_if> | 
        <while_statement_no_short_if> | <for_statement_no_short_if>
<statement_without_trailing_substatement> -> <block> | <emtpy_statement> |
     <expression_statement> | <switch_statement> |
     <do_statement> | <break_statement> |
     <continue_statement> | <return_statement>
<empty_statement> -> ;
<labeled_statement> -> <identifier> : <statement>
<labeled_statement_no_short_if> -> <identifier> : <statement_no_short_if>
<expression_statement> => <statement_expression> ;
<statement_expression> -> <assignment> | <preincrement_expression> |
         <postincrement_expression> | <predecrement_expression> |
         <postdecrement_expression> | <method_invocation> |
         <class_instance_creation_expression>
<if_then_statement> -> @if (<expression>) <statement> @endif;
<if_then_else_statement> -> @ if (<expression>) <statement_no_short_if> @else
<statement_no_short_if> @endif;
<if_then_else_statement_no_short_if> -> @if (<expression>) <statement_no_short_if> @else
        <statement_no_short_if> @endif;
<switch_statement> -> @switch (<expression>) <switch_block> @endswitch;
<switch_block> -> : <switch_block_statement_groups>? <switch_labels>? end;
<switch_block_statement_groups> -> <switch_block_statement_group> |
  <switch_block_statement_groups>
  <switch_block_Statement_group>
<switch_block_statement_group> -> <switch_labels><switch_label>
<switch_labels> -> <switch_labels> | <switch_labels><switch_label>
<switch_label> -> @case <constant_expression> : | @default :
<while_statement> -> @while (<expression>) <statement> @endwhile;
<while_statement_no_short_if> -> @while (<expression>) <statement_no_short_if>
<do_statement> -> @do: <statement> @while (<expression>);
<for_statement> -> @for (<for_init>?; <expression>?; <for_update>?) <statement> @endfor;
<for_statement_no_short_if> -> @for( <for_init>?; <expression>?; <for_update>?)
    <statement_no_short_if> @endfor;
<for_init> -> <statement_expression_list> | <local_variable_Declaration>
<for_update> -> <statement_expression_list>
<statement_expression_list> -> <statement_expression> | <statement_expression_list>,
    <statement_expression>
<break_statement> -> @break <identifier>?;
<continue_statement> -> @continue <identifier>?;
<return_statement> -> @return <expression>?;

EXPRESSIONS
<constant_expression> -> <expression>
<expression> -> <assignment_expression>
<assignment_expression> -> <conditional_expression> | <assignment>
<assignment> -> <left_hand_side><assignment_operator><assignment_expression>
<left_hand_side> -> <expression_name> | <field_access> | <array_access>
<assignment_operator> -> = |*= | /= | %= | += | -= | &=
<conditional_or_expression> -> <conditional_and_expression> | <conditional_or_expression ||
    <conditional_and_expression>
<conditional_and_expression> -> <inclusive_or_expression> | <conditional_and_expression>
    && <inclusive_or_expression>
<inclusive_or_expression> -> <exclusive_or_expression> | <inclusive_or_expression> |
 <exclusive_or_expression>
<exclusive_or_expression> -> <and_expression> | <exclusive_or_expression> ^
  <and_expression>
<and_expression> -> <equality_expression> | <and_expression> & <equality_expression>
<equality_expression> -> <relational_expression> | <equality_expression> ==
      <relational_expression> | <equality_expression> !=
      <relational_expression>
<relational_expression> -> <shift_expression> | <relational_expression> < <shift_expression> |
        <relational_expression> > <shift_expression> |
        <relational_expression> <= <shift_expression> |
        <relational_expression> >= <shift_expression> |
        <relational_expression> instanceof <reference_type>
<shift_expression> -> <additive_expression> | <shift_expression> << <addititve_expression> |
 <shift_expression> >> <additive_expression> | <shift_expression> >>>
 <additive_expression>
<additive_expression> -> <multiplicative_expression> | <additive_expression> +
      <multiplicative_expression> | <additive_expression> -
      <multiplicative_expression>
<multiplicative_expression> -> <unary_expression> | <multiplicative_expression> *
   <unary_expression> | <multiplicative_expression> /
   <unary_expression> | <multiplicative_expression> %
   <unary_expression>
<unary_expression> -> <preincrement_expression> | <predecrement_expression> | +
   <unary_expression> | - <unary_expression> |
   <unary_expression_not_plus_minus>
<predecrement_expression> -> --<unary_expression>
<preincrement_expression> -> ++<unary_expression>
<unary_expression_not_plus_minus> -> <postfix_expression> | -<unary_expression> |
      !<unary_expression>
<postdecrement_expression> -> <postfix_expression> --
<postincrement_expression> -> <postfix_expression> ++
<postfix_expression> -> <primary> | <expression_name> | <postincrement_expression> |
    <postdecrement_expression>
<method_invocation> -> <method_name> (<argument_list>?) | <primary> -> <identifier>
    (<arguement_list>?)
<field_access> -> <primary> -> <identifier>
<primary> -> <primary_no_new_array> | <array_creation_expression>
<primary_no_new_array> -> <literal> | this | (<expression>) |
           <class_instance_creation_expression> | <field_access> |
           <method_invocation> | <array_access>
<class_instance_creation_expression> -> new <class_type> (<argument_list>?)
<argument_list> -> <expression> | <argument_list>, <expression>
<array_creation_expression> -> new <primitive_type><dim_exprs><dims>? | new
     <class_or_interface_type><dim_exprs><dims>?
<dim_exprs> -> <dim_expr> | <dim_exprs><dim_expr>
<dim_expr> -> [<expression>]
<dims> -> [ ] | <dims> [ ]
<array_access> -> <expression_name> [<expression>] | <primary_no_new_array>
       [<expression>]

TOKENS
<package_name> -> <identifier> | <package_name> -> <identifier>
<type_name> -> <identifier> | <package_name> -> <identifier>
<simple_type_name> -> <identifier>
<expression_name> -> <identifier> | <ambiguous_name> -> <identifier>
<method_name> -> <identifier> | <amibguous_name> -> <identifier>
<ambiguous_name> -> <identifier | <ambiguous_name> -> <identifier>
<literal> -> <integer_literal> | <floating_literal> | <boolean_literal> | <character_literal> |
       <string_literal> | <null_literal>
<integer_literal> -> <digits>
<floating_literal> -> <digits> . <digits> 
<signed_integer> -> <sign>? <digits>
<sign> -> + | -
<digits> -> <digit> | <digits><digit>
<digit> -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<character_literal> -> ‘<single_character>’ | ‘<escape_sequence>’
<single_character> -> <input_character> except ‘ and \
<string_literal> -> “<string_characters>”
<string_characters> => <string_character> | <string_characters><string_character>
<string_character> -> <input_character> except “ and \ | <escape_character>
<input_character> -> <alpha> | <symbol>
<alpha> ->  a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | A | B |
                   C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | X | Y | Z
<symbol> -> ` | ~ | ! | @ | # | $ | % | ^ | & | * | ( | ) | _ | + | - | = | { | } | [ | ] | , | . | / | < | > | ? | ; | ’ | : |
                     ” | \ | |
<null_literal> -> null
<boolean_literal> -> true | false | TRUE | FALSE
<keyword> -> array | boolean | break | byte | case | character | class | constant | continue |
                       default | do | double | else | elseif | end | endif | endfor | endwhile | float | for | if | include
                       | integer | long | new | package | restricted | guarded | open | return | short | static |
                       switch | while


EXAMPLE CODE
/...comment.../
@include package_name;
Open class TestCode:
open static vacant main():
integer::variable_name = variable_value;
float::variable_name = variable_value;
string::variable_name = variable_value;
array:: variable_name = variable_value;	

@if(argument_list):
	/..if something../
	@if(argurment_list):
		/..if something../
	@endif;
@elseif(argument_list):
	/..else if something../
@else:
	/..finally../
@endif;

@for(argument_list):
	/..loop../
@endfor;

@do:
	/..loop something../
@while(condition);
end main;
	
	define open integer function_name(parameter_list):
	/..function definition../
	@return integer_value;
end function_name;

define guarded vacant function_name(parameter_list):
	/..method definition../
end function_name;

define restricted task task_name(parameter_list):
	/..function definition../
	@return boolean_value;
end function_name;
end TestCode;
